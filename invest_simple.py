# -*- coding: utf-8 -*-
"""invest_simple.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1U54nQWmti3sO5-w8JGKV5DMkJ0K7mt_Q

# Investimento

## resumo da ideia

> De uma forma resumida o programa vai receber um valor X em uma determinada criptomoeda, apartir desse valor vai fazer uma previsão simples de quanto ganharia em 3 modalidades de investimento em um Y tempo, além de mostrar o lucro após esse Y tempo, ele deve apresentar de forma simples os gastos que terá com cada modalidade é o risco associado.


## detalhando o projeto

> será feito em python, dentro do google colab.

> manterei um backup do projeto em meu github

## inicio 1.0.0

> primeiro vou utilisar uma interface para o usuario inserir o valor de inicio a variavel X como dita inicialmente, é a variavel Y tempo.

> após a construção dessa interface, vai mostrar a 3 modalidades de que o bot consegue utilisar. é ao lado dessas modalidade uma previsão simples do lucro, gasto é risco no tempo Y.

> após selecionar a modalidade o programa/bot começa as suas operações.

> após passar Y tempo analisando os resultandos.

## Instalando as libs
"""

# pip install PySimpleGUI
#
# #pip install opencv
#
# """## Interface Gráfica"""
#
import PySimpleGUI as Kar
#
# import os
# os.system('Xvfb :1 -screen 0 1600x1200x16  &')
# os.environ['DISPLAY']=':1.0'
#
# import PySimpleGUI as sg
# import subprocess
#
# # Função para iniciar o x11vnc
# def start_x11vnc():
#     command = "x11vnc"
#     subprocess.Popen(command, shell=True)
#
# # Função para encerrar o x11vnc
# def stop_x11vnc():
#     subprocess.Popen("pkill x11vnc", shell=True)
#
# # Layout da interface gráfica
# layout = [
#     [sg.Button("Iniciar x11vnc"), sg.Button("Parar x11vnc")],
#     [sg.Button("Sair")]
# ]
#
# window = sg.Window("Controle x11vnc", layout)
#
# while True:
#     event, values = window.read()
#
#     if event == sg.WIN_CLOSED or event == "Sair":
#         break
#     elif event == "Iniciar x11vnc":
#         start_x11vnc()
#         sg.popup("x11vnc iniciado com sucesso!")
#     elif event == "Parar x11vnc":
#         stop_x11vnc()
#         sg.popup("x11vnc parado com sucesso!")
#
# window.close()
#
# from IPython.display import display, HTML
# from ipywidgets import interact, Button, Output
#
# def on_button_click(b):
#     output_area.append_stdout(f"Botão {b.description} clicado!\n")
#
# button1 = Button(description="Botão 1")
# button2 = Button(description="Botão 2")
#
# button1.on_click(on_button_click)
# button2.on_click(on_button_click)
#
# display(button1)
# display(button2)
#
# output_area = Output()
# display(output_area)

class Screen:
    def __init__(self):
        pass

    def inicial(self):
        home = [
            [Kar.Push()],
            [Kar.VPush,Kar.Button('Noticias Recentes', key='001_O', size=(18, 2), font=('Fantasy', 15)),Kar.VPush],
            [Kar.VPush,Kar.Button('Noticias Passadas', key='002_O', size=(18, 2), font=('Times', 15)),Kar.VPush,],
            [Kar.VPush,Kar.Button('ações criptomoedas', key='003_O', size=(18, 2), font=('Times', 15)),Kar.VPush,],
            [Kar.Push()]
        ]
        return Kar.Window('Home', home, auto_size_text=True, finalize=True, resizable=True,
                          icon=Kar.EMOJI_BASE64_HAPPY_LAUGH)
    def Tela_NR(self):
        tela_NR = [
            [Kar.VPush,Kar.Text('Date', key='001_O',size=(12,1), font=('Fantasy',15)),Kar.VPush],
            [Kar.Push()],
            [Kar.Push()],
            [Kar.VPush,Kar.Listbox(values=['1','2','3','4','5','6'],size=(30,15)),Kar.VPush],
            [Kar.Push()],
            [Kar.VPush,Kar.Button('Mostrar Noticia'),Kar.VPush]
        ]

"""## Funções principais"""

class start:
    def __init__(self):
        self.janelas = Screen()

    def telas(self):
        Kar.theme("DarkGreen4")
        self.Tela_1 = self.janelas.inicial()
        while True:
            window, eventos, values = Kar.read_all_windows()
            if window == self.Tela_1 and eventos == Kar.WIN_CLOSED:
                break

"""## Executando"""

if __name__ == '__main__':
    a = start()
    a.telas()

!x11vnc -display :1 -forever

"""## teste"""

from PySimpleGUI import PySimpleGUI as sg
# layout da janela
sg.theme('DarkGreen4')
cara = [
    [sg.Button('primeiro', key=('001_f'), size=(15, 1))],
    [sg.Button('segundo', size=(15, 1),)],
    [sg.Button('terceiro', size=(15, 1))],
    [sg.Button('quarto', size=(15, 1))],
    [sg.Button('quinto', size=(15, 1))],
    [sg.Button('sexto', size=(15, 1))],
    [sg.Button('setimo', size=(15, 1))],
    [sg.Button('oitavo', size=(15, 1))],
    [sg.Button('nono', size=(15, 1))],
    [sg.Button('zero', size=(15, 1))]
]
Utiliz = [
    [sg.Text('Nome de Utilizador:',size=(16, 1)), sg.Input(key='Utilizador', )],
    [sg.Text('Numero de estudante:',size=(16, 1)), sg.Input(key='id')],
    [sg.Text('concelho:',size=(16, 1)), sg.Input(key='concelho')],
    [sg.Text('freguesia:',size=(16, 1)), sg.Input(key='freguesia')],
    [sg.Text('email:',size=(16, 1)), sg.Input(key='email')],
    [sg.Text('Tele:',size=(16, 1)), sg.Input(key='tele')],
    [sg.Button('Voltar'), sg.Button('Cadastrar',)]
]
# criação
inter = sg.Window('Trabalho de programacao', cara)
uti = sg.Window('Cadastro Utilizardor', Utiliz,size=(300,220))

# ler os eventos
while True:
    eventos, valores = inter.read()
    if eventos == sg.WIN_CLOSED:
        break
    if eventos == 'zero':
        break
    if eventos == '001_f':
        eventos, valores = uti.read()
        if eventos == sg.WIN_CLOSED:
            break
        if eventos == 'Cadastrar':
            nome_estudante = valores['Utilizador']
            id_estudante = valores['id']
            morada = valores['concelho']+valores['freguesia']
            email = valores['email']
            tele = valores['tele']
            print(nome_estudante,id_estudante, morada, email, tele)
            # if sg.popup('Usuario Salvo com Sucesso', modal=(True)):
            sg.Window.close(uti)
        if eventos == 'Voltar':
            sg.Window.close(uti)

import PySimpleGUI as sg
from pyngrok import ngrok

# Defina a interface gráfica usando PySimpleGUI
layout = [[sg.Text('Hello from PySimpleGUI')],
          [sg.Button('OK')]]

window = sg.Window('Example', layout)

# Crie um túnel para um servidor local
public_url = ngrok.connect(addr='8694', proto='http')
print('Interface gráfica disponível em:', public_url)

try:
    while True:
        event, values = window.read()
        if event == sg.WINDOW_CLOSED or event == 'OK':
            break
finally:
    window.close()
    ngrok.disconnect(public_url)
    ngrok.kill()

import PySimpleGUIWeb as sg

layout = [[sg.Text('Hello from PySimpleGUI')],
          [sg.Button('OK')]]

window = sg.Window('Example', layout)

while True:
    event, values = window.read()
    if event == sg.WINDOW_CLOSED or event == 'OK':
        break

window.close()

from threading import Thread

def run_app():
    import PySimpleGUIWeb as sg
    layout = [[sg.Text('Hello from PySimpleGUIWeb')],
              [sg.Button('OK')]]
    window = sg.Window('Example', layout)
    while True:
        event, values = window.read()
        if event == sg.WINDOW_CLOSED or event == 'OK':
            break
    window.close()

if __name__ == '__main__':
    app_thread = Thread(target=run_app)
    app_thread.start()

from pyngrok import ngrok

public_url = ngrok.connect(8080)

print('Interface gráfica disponível em:', public_url)

from threading import Thread


def run_app():
    import PySimpleGUIWeb as sg
    layout = [[sg.Text('Hello from PySimpleGUIWeb')],
              [sg.Button('OK')]]
    window = sg.Window('Example', layout)
    while True:
        event, values = window.read()
        if event == sg.WINDOW_CLOSED or event == 'OK':
            break
    window.close()

from pyngrok import ngrok

if __name__ == '__main__':
    ngrok.set_auth_token('2Xq557qdon6WjRjgCcTvoYJdpW9_7APF8VcvX3sB9mQgHt2Y9')
    public_url = ngrok.connect(8080)

    print('Interface gráfica disponível em:', public_url)
    app_thread = Thread(target=run_app)
    try:
        app_thread.start()
        app_thread.join()
    except KeyboardInterrupt:
        ngrok.kill()

from flask import Flask

app = Flask(__name__)

@app.route('/')
def hello():
    return 'Olá, mundo!'

from flask import Flask
from pyngrok import ngrok

app = Flask(__name__)

@app.route('/')
def hello():
    return 'Olá, mundo!'

if __name__ == '__main__':
    ngrok.set_auth_token('2Xq557qdon6WjRjgCcTvoYJdpW9_7APF8VcvX3sB9mQgHt2Y9')

    public_url = ngrok.connect(8080)

    print('Interface gráfica disponível em:', public_url)

    try:
        !python app.py
        app.run(debug=True)
    except KeyboardInterrupt:
        ngrok.kill()

from flask import Flask
from pyngrok import ngrok
from multiprocessing import Process

app = Flask(__name__)

@app.route('/')
def hello():
    return 'Olá, mundo!'

def run_flask_app():
    app.run()

def expose_with_ngrok():
    ngrok.set_auth_token('2Xq557qdon6WjRjgCcTvoYJdpW9_7APF8VcvX3sB9mQgHt2Y9')

    public_url = ngrok.connect(5000)

    print('Interface gráfica disponível em:', public_url)

if __name__ == '__main__':
    flask_process = Process(target=run_flask_app)
    flask_process.start()

    import time
    time.sleep(5)

    ngrok_process = Process(target=expose_with_ngrok)
    ngrok_process.start()

